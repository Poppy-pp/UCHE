<!-- 角色权限 -->
<template>
	<section class="tab_content-wrapper">
		<!--工具条-->
		<el-col :span="24" class="toolbar" style="padding-bottom: 0px;">
			<el-form :inline="true" :model="filters">
				<template v-for="(item,index) in filters.domSearch">
					<template v-if="index == 0">
						<div style="display:inline-block;margin:5px 10px 10px 0;">
							  <el-input size="small" class="noborder color icon nofocus" @keyup.native.ctrl.8="clearAll()" @keyup.native.13="handleQuery" placeholder="请输入查询内容" v-model="filters.domSearch[index].content">
							    <el-select class="wp_select" multiple clearable filterable v-model="filters.domSearch[index].select" slot="prepend" placeholder="选择条件">
								       <el-option label="角色名称" value="rolename"></el-option>
								       <el-option label="角色值" value="rolevalue"></el-option>
								       <el-option label="描述" value="description"></el-option>
							    </el-select>
							    <template v-if="index == filters.domSearch.length-1">
							      	<el-button slot="append" @click="addSelect" icon="el-icon-plus" title="添加查询条件"></el-button>
							    </template>
							    <template v-else>
							    	<el-button slot="append" @click="removeSelect(index)" icon="el-icon-minus" title="移除查询条件"></el-button>
							    </template>
							  </el-input>
						</div>
					</template>
					<template v-else>
						<el-col :span="24">
							<div style="display:inline-block;margin:0 10px 10px 0;">
								  <el-input size="small" class="noborder color icon nofocus" @keyup.native.ctrl.8="clearAll()" @keyup.native.13="handleQuery" placeholder="请输入查询内容" v-model="filters.domSearch[index].content">
								    <el-select class="wp_select" multiple clearable filterable v-model="filters.domSearch[index].select" slot="prepend" placeholder="选择条件">
								       <el-option label="角色名称" value="rolename"></el-option>
								       <el-option label="角色值" value="rolevalue"></el-option>
								       <el-option label="描述" value="description"></el-option>
								    </el-select>
								    <template v-if="index == filters.domSearch.length-1">
								      	<el-button slot="append" @click="addSelect" icon="el-icon-plus" title="添加查询条件"></el-button>
								    </template>
								    <template v-else>
								    	<el-button slot="append" @click="removeSelect(index)" icon="el-icon-minus" title="移除查询条件"></el-button>
								    </template>
								  </el-input>
							</div>
						</el-col>
					</template>
					
					<template v-if="index == 0">
						<el-form-item>
							<Button type="primary" @click="handleQuery" icon="ios-search">查询</Button>
						</el-form-item>
						<el-form-item>
							<Button type="primary" @click="handleAdd" icon="plus-round">新增</Button>
						</el-form-item>
					</template>
				</template>
			</el-form>
		</el-col>
		<!--列表-->
		<el-table :max-height="windowOutHeight-260" border :data="listData" highlight-current-row v-loading="listLoading" @selection-change="selsChange" style="width: 100%;">
			<el-table-column type="index" label="#" width="40" align="center">
			</el-table-column>
			<el-table-column type="selection" width="40" align="center">
			</el-table-column>
			<el-table-column prop="rolename" label="角色名称" align="center">
			</el-table-column>
			<el-table-column prop="rolevalue" label="角色值" align="center">
			</el-table-column>
			<el-table-column prop="description" label="描述" align="center">
			</el-table-column>
			<el-table-column prop="isenable" label="是否有效" :formatter="formatIsactive" align="center">
			</el-table-column>
			<el-table-column fixed="right" label="操作" align="center" width="140">
				<template scope="scope">
					<Button type="primary" shape="circle" size="small" @click="handleEdit(scope.$index, scope.row)" title="编辑角色"><Icon type="edit"></Icon></Button>
					<Button type="primary" shape="circle" size="small" @click="addResource(scope.$index, scope.row)" title="编辑资源"><Icon type="pricetag"></Icon></Button>
					<Button disabled type="primary" shape="circle" size="small" @click="addResource(scope.$index, scope.row)" title="编辑按钮权限"><Icon type="toggle"></Icon></Button>
                   	 			<Button type="error" shape="circle" size="small" @click="handleDel(scope.$index, scope.row)" title="删除"><Icon type="trash-a"></Icon></Button>
				</template>
			</el-table-column>
		</el-table>

		<!--工具条-->
		<el-pagination
      			@size-change="handleSizeChange"
      			@current-change="handleCurrentChange"
     			 :page-sizes="[15, 50, 80,99]"
      			:page-size="pageSize"
     			 layout="total, sizes, prev, pager, next, jumper"
      			:total="total" style="text-align: right;margin-top: 5px;"
      			>
		</el-pagination>

		<!--资源添加界面-->
		<el-dialog title="编辑资源" :modal-append-to-body="false" :visible.sync="addRourceInfoVisible" :close-on-click-modal="false" @close="rouseEditClose" class="zidigo">
			<el-input
			  placeholder="输入关键字进行过滤"
			  v-model="filterText"
			  size="small">
			</el-input>
			<el-tree
			  :data="regions"
			  show-checkbox
			  highlight-current
			  node-key="id"
			  check-strictly
			  :default-expanded-keys="defaultExpandedKeys"
			  :default-checked-keys="defaultCheckedKeys"
			  ref="treeRouse"
			  :empty-text="emptyText"
			  :render-content="renderContent"
			  @check-change="handleCheckChange"
			  :props="defaultProps"
			  :filter-node-method="filterNode"
			 >
			</el-tree>
			<div slot="footer" class="dialog-footer">
				<Button @click.native="addRourceInfoVisible = false">取消</Button>
				<Button type="primary" @click.native="handleNodeClick" :loading="nodeLoading">提交</Button>
			</div>
		</el-dialog>

        		<!--编辑界面-->
		<Modal title="编辑角色" :modal-append-to-body="false" v-model="editFormVisible" :close-on-click-modal="false">
			<el-form :model="editForm" :rules="editFormRules" ref="editForm">
 				<el-form-item label="" prop="rolename">
					<el-input size="small" v-model="editForm.rolename" auto-complete="off">
						<template slot="prepend">角色名称</template>
					</el-input>
				</el-form-item>
 				<el-form-item label="" prop="rolevalue">
					<el-input size="small" v-model="editForm.rolevalue" auto-complete="off">
						<template slot="prepend">角色值</template>
					</el-input>
				</el-form-item>
 				<el-form-item label="" prop="description">
					<el-input size="small" v-model="editForm.description" auto-complete="off">
						<template slot="prepend">描述</template>
					</el-input>
				</el-form-item>
			</el-form>
			<div slot="footer" class="dialog-footer">
				<Button @click.native="editFormVisible = false">取消</Button>
				<Button type="primary" @click.native="editSubmit" :loading="editLoading">提交</Button>
			</div>
		</Modal>



		<!--新增界面-->
		<Modal title="新增角色" :modal-append-to-body="false" v-model="addFormVisible" :close-on-click-modal="false">
			<el-form :model="addForm" :rules="addFormRules" ref="addForm">
 				<el-form-item label="" prop="rolename">
					<el-input size="small" v-model="addForm.rolename" auto-complete="off">
						<template slot="prepend">角色名称</template>
					</el-input>
				</el-form-item>
 				<el-form-item size="small" label="" prop="rolevalue">
					<el-input v-model="addForm.rolevalue" auto-complete="off">
						<template slot="prepend">角色值</template>
					</el-input>
				</el-form-item>
 				<el-form-item size="small" label="" prop="description">
					<el-input v-model="addForm.description" auto-complete="off">
						<template slot="prepend">描述</template>
					</el-input>
				</el-form-item>
			</el-form>
			<div slot="footer" class="dialog-footer">
				<Button @click.native="addFormVisible = false">取消</Button>
				<Button type="primary" @click.native="addSubmit" :loading="addLoading">提交</Button>
			</div>
		</Modal>
	</section>
</template>
<style type="text/css">
	.zidigo .Modal__body{
		padding-top: 0;
		font-size: 2rem;
	}
</style>
<script>
	import util from '../../../styles/js/util';
	import {getRoleList,addRole,modifyRole,removeRole,getMenuList,getRoleMenu,editRoleMenu} from '../../../api/api';
	// import {getSysRoleInfoList, addSysRoleInfo ,modifySysRoleInfo,removeSysRoleInfo,getSysResourceInfoList,editRuleResourceInfo,getRuleResourceInfo} from '../../../api/api';

	export default {
		props:['windowOutHeight'],
		watch: {
		      filterText(val) {
		        this.$refs.treeRouse.filter(val);
		      }
		},
		data() {
			return {
				filters: {
					domSearch:[{ select:['rolename'],content:'' }],//查询框
				},
				listData: [],
				customers:[],
				total: 0,
				currentPage: 0,
				pageSize:15,
				listLoading: false,
				addRourceInfoVisible:false,
				sels: [],//列表选中列
				editFormVisible: false,//编辑界面是否显示
				editLoading: false,
				nodeLoading:false,
				defaultCheckedKeys:[],
				defaultExpandedKeys:[],
				curRoleId:'',
				editFormRules: {
				},
				//编辑界面数据
				editForm: {
					id:0,
					rolename:'',
					rolevalue:'',
					description:'',
					isenable:'',
				},
				addFormVisible: false,//新增界面是否显示
				addLoading: false,
				addFormRules: {
				},
				//新增界面数据
				addForm: {
					rolename:'',
					rolevalue:'',
					description:'',
					isenable:'',
				},
				emptyText:"加载中...",
				regions: [],
			        defaultProps: {
			          label: 'name',
			          children: 'children'
			        },
			        isPewe:true,
			        filterText: '',
			}
			         
		},
		methods: {
			filterNode(value, data) {
			        if (!value) return true;
			        return data.name.indexOf(value) !== -1;
			},
			rouseEditClose:function(){
				this.regions = [];
			},
			//树的选中操作
		    handleCheckChange(data, checked, indeterminate) {
		        	var arr = this.$refs.treeRouse.getCheckedKeys(),
		        	kesarry = this.$refs.treeRouse.getCheckedNodes(),
		        	isClearFl = false;
		        	/*如果子菜单有选中不能取消当前选择 start*/
		        	if(!checked && data.parentid != 0){
		        		kesarry.forEach((res,index)=>{
		        			if(res.id == data.parentid){
		        				res.children.forEach((res,index)=>{
		        					if($.inArray(res.id, arr) > 0) {
		        						isClearFl = true;
		        						return false;
		        					}
		        				});
		        				if(!isClearFl){
					        		this.$refs.treeRouse.setChecked(data.parentid,false,false);
					        		return false;
		        				}
		        			}
		        		});
		        	}
		        	/*如果子菜单有选中不能取消当前选择 end*/
		        	/*选中子类的时候选中 至少一个父类*/
		        	if($.inArray(data.parentid, arr) < 0 && checked && data.parentid != 0) {
		        		this.$refs.treeRouse.setChecked(data.parentid,true,false);
			        	/*选中父类时候选中所有子类*/
			        	if(data.children.length > 0 && this.isPewe) {
			        		util.setChecked(this.$refs.treeRouse,data,true,true);
			        	};
		        		this.isPewe = false;
		        		return;
		        	};
		        	/*选中父类时候选中给所有子类*/
		        	if(data.parentid == 0 && checked && this.isPewe) {
		        		util.setChecked(this.$refs.treeRouse,data,true,true);
		        		return;
		        	};
		        	/*选中父类时候取消所有子类*/
		        	if(data.parentid == 0 && !checked && this.isPewe) {
		        		util.setChecked(this.$refs.treeRouse,data,false,true);
		        		return;
		        	};
		        	/*选中父类时候选中所有子类*/
		        	if(data.parentid != 0 && data.children.length > 0 && checked && this.isPewe) {
		        		util.setChecked(this.$refs.treeRouse,data,true,true);
		        		return;
		        	};
		        	/*选中父类时候取消所有子类*/
		        	if(data.parentid != 0 && data.children.length > 0 && !checked && this.isPewe) {
		        		util.setChecked(this.$refs.treeRouse,data,false,true);
		        		return;
		        	};
		        	this.isPewe = true;
		        },
			addResource : function(index , row){
				this.curRoleId = row.id;
				this.addRourceInfoVisible = true;
				let para = {
					roleid:row.id,
					showCount:1000,
					rolename :this.filters.name
				};
				this.emptyText = "加载中~~~";
				getRoleMenu(para).then((res) => {
					var dk = [],ek = [],
					para = {
						parentid : 0,
						system:'C'
					};
					res.data.data.records.forEach(function(obj){
						dk.push(obj.resid);
						ek.push(obj.resid);
					});
					this.defaultCheckedKeys = dk;//选中当前树
					this.defaultExpandedKeys = ek;//展开
					if(this.regions.length > 0) return;
					//初始化所有父节点树
					getMenuList(para).then((res) => {
						this.regions = res.data.data.records;
						this.emptyText = "完成";
					});
				});
			},
		        handleNodeClick() {
		        	this.nodeLoading = true;
		        	let treeNode = this.$refs.treeRouse.getCheckedNodes(),
		        	para = [],_this = this;
		        	treeNode.forEach(function(item,index){
		        		var obj = {};
		        		obj.roleid = _this.curRoleId;
		        		obj.resid = item.id;
		        		para.push(obj);
		        		/*2c*/
		        		if(item.children.length > 0){
		        			item.children.forEach(function(item1,index){
				        		var obj = {};
				        		if(item1.hidden == 1){
					        		obj.roleid = _this.curRoleId;
					        		obj.resid = item1.id;
					        		para.push(obj);
				        		}
				        	});
		        		}
		        	});
		        	editRoleMenu(para).then((res) => {
				var data = res.data.data;
				if (res.data.result.code == 0) {
					this.$message({
					          message: '编辑资源成功！',
					          type: 'success'
					});
				        	this.nodeLoading = false;
				        	this.addRourceInfoVisible = false;
					}
				});
		        },
			
			renderContent(h, { node, data, store }) {
				if(data.hidden == 1 && data.restype == 1) store.remove(data);
				if(!data.name && !data.children[0]) return;
			        return (
			            <span>
			              <span>{!data.name ? data.children[0].name : data.name}</span>
			            </span>);
			},

			// 添加查询条件
			addSelect:function(){
				this.filters.domSearch.push({ select:[],content:'' });
			},
			// 移除查询条件
			removeSelect:function(index){
				this.filters.domSearch.splice(index, 1);//从当前index位置开始，删除一项
			},
			//快捷查询清空——ctrl+backspace
			clearAll:function(){
				this.filters.domSearch = [{ select:[],content:'' }]//清空查询框;
			},
			//有效转换器
		            formatIsactive: function (row, column) {
		                return row.isenable == 1 ? '有效' : row.isenable == 0 ? '无效' : '未知';
		            },
			//切换每页显示数量
			handleSizeChange(val) {
				this.pageSize = val;
				this.handleQuery();
	      		},
			handleCurrentChange(val) {
				this.currentPage = val;
				this.handleQuery();
			},
			//获取保单列表
			handleQuery() {
				let para = {
					currentPage : this.currentPage,
					showCount	: this.pageSize,
					domSearch    : this.filters.domSearch,
				};
				this.listLoading = true;
				getRoleList(para).then((res) => {
					this.total = res.data.data.totalResult;
					this.listData = res.data.data.records;
					this.listLoading = false;
				});
			},
			//删除
			handleDel: function (index, row) {
				this.$confirm('确认删除该记录吗?', '提示', {
					type: 'warning'
				}).then(() => {
					this.listLoading = true;
					let para = { 
						id: row.id
					};
					removeRole(para).then((res) => {
						if (res.data.result.code == 0) {
							this.listLoading = false;
							this.$message ({
								message : '删除成功',
								type: 'success'
							});
							this.handleQuery();
						}
					});
				}).catch(() => {

				});
			},
			//显示编辑界面
			handleEdit: function (index, row) {
				this.editFormVisible = true;
				this.editForm = Object.assign({}, row);
			},
			//显示新增界面
			handleAdd: function () {
				this.addFormVisible = true;
			},
			//编辑
			editSubmit: function () {
				this.$refs.editForm.validate((valid) => {
					if (valid) {
						this.editLoading = true;
						let para = Object.assign({}, this.editForm);
						modifyRole(para).then((res) => {
							if (res.data.result.code == 0) {
								this.editLoading = false;
								this.$message ({
									message : '编辑成功',
									type: 'success'
								});
								this.$refs['editForm'].resetFields();
								this.editFormVisible = false;
								this.handleQuery();
							}
						});
					}
				});
			},
			//新增
			addSubmit: function () {
				this.$refs.addForm.validate((valid) => {
					if (valid) {
						this.addLoading = true;
						let para = Object.assign({}, this.addForm);
						addRole(para).then((res) => {
							if (res.data.result.code == 0) {
								this.addLoading = false;
								this.$message ({
									message : '新增成功',
									type: 'success'
								});
								this.$refs['addForm'].resetFields();
								this.addFormVisible = false;
								this.handleQuery();
							}
						});
					}
				});
			},
			selsChange: function (sels) {
				this.sels = sels;
			},
		},
		mounted() {
			this.handleQuery();
		}
	}

</script>

<style scoped>

</style>